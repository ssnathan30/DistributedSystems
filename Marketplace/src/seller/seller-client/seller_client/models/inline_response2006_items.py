# coding: utf-8

"""
    Seller API

    API for managing seller accounts and items for sale  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from seller_client.configuration import Configuration


class InlineResponse2006Items(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'str',
        'item_name': 'str',
        'item_category': 'str',
        'keywords': 'list[str]',
        'condition': 'str',
        'sale_price': 'float',
        'quantity': 'int',
        'seller_id': 'str'
    }

    attribute_map = {
        'item_id': 'item_id',
        'item_name': 'item_name',
        'item_category': 'item_category',
        'keywords': 'keywords',
        'condition': 'condition',
        'sale_price': 'sale_price',
        'quantity': 'quantity',
        'seller_id': 'seller_id'
    }

    def __init__(self, item_id=None, item_name=None, item_category=None, keywords=None, condition=None, sale_price=None, quantity=None, seller_id=None, _configuration=None):  # noqa: E501
        """InlineResponse2006Items - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_id = None
        self._item_name = None
        self._item_category = None
        self._keywords = None
        self._condition = None
        self._sale_price = None
        self._quantity = None
        self._seller_id = None
        self.discriminator = None

        if item_id is not None:
            self.item_id = item_id
        if item_name is not None:
            self.item_name = item_name
        if item_category is not None:
            self.item_category = item_category
        if keywords is not None:
            self.keywords = keywords
        if condition is not None:
            self.condition = condition
        if sale_price is not None:
            self.sale_price = sale_price
        if quantity is not None:
            self.quantity = quantity
        if seller_id is not None:
            self.seller_id = seller_id

    @property
    def item_id(self):
        """Gets the item_id of this InlineResponse2006Items.  # noqa: E501


        :return: The item_id of this InlineResponse2006Items.  # noqa: E501
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this InlineResponse2006Items.


        :param item_id: The item_id of this InlineResponse2006Items.  # noqa: E501
        :type: str
        """

        self._item_id = item_id

    @property
    def item_name(self):
        """Gets the item_name of this InlineResponse2006Items.  # noqa: E501


        :return: The item_name of this InlineResponse2006Items.  # noqa: E501
        :rtype: str
        """
        return self._item_name

    @item_name.setter
    def item_name(self, item_name):
        """Sets the item_name of this InlineResponse2006Items.


        :param item_name: The item_name of this InlineResponse2006Items.  # noqa: E501
        :type: str
        """

        self._item_name = item_name

    @property
    def item_category(self):
        """Gets the item_category of this InlineResponse2006Items.  # noqa: E501


        :return: The item_category of this InlineResponse2006Items.  # noqa: E501
        :rtype: str
        """
        return self._item_category

    @item_category.setter
    def item_category(self, item_category):
        """Sets the item_category of this InlineResponse2006Items.


        :param item_category: The item_category of this InlineResponse2006Items.  # noqa: E501
        :type: str
        """

        self._item_category = item_category

    @property
    def keywords(self):
        """Gets the keywords of this InlineResponse2006Items.  # noqa: E501


        :return: The keywords of this InlineResponse2006Items.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this InlineResponse2006Items.


        :param keywords: The keywords of this InlineResponse2006Items.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    @property
    def condition(self):
        """Gets the condition of this InlineResponse2006Items.  # noqa: E501


        :return: The condition of this InlineResponse2006Items.  # noqa: E501
        :rtype: str
        """
        return self._condition

    @condition.setter
    def condition(self, condition):
        """Sets the condition of this InlineResponse2006Items.


        :param condition: The condition of this InlineResponse2006Items.  # noqa: E501
        :type: str
        """

        self._condition = condition

    @property
    def sale_price(self):
        """Gets the sale_price of this InlineResponse2006Items.  # noqa: E501


        :return: The sale_price of this InlineResponse2006Items.  # noqa: E501
        :rtype: float
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this InlineResponse2006Items.


        :param sale_price: The sale_price of this InlineResponse2006Items.  # noqa: E501
        :type: float
        """

        self._sale_price = sale_price

    @property
    def quantity(self):
        """Gets the quantity of this InlineResponse2006Items.  # noqa: E501


        :return: The quantity of this InlineResponse2006Items.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InlineResponse2006Items.


        :param quantity: The quantity of this InlineResponse2006Items.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def seller_id(self):
        """Gets the seller_id of this InlineResponse2006Items.  # noqa: E501


        :return: The seller_id of this InlineResponse2006Items.  # noqa: E501
        :rtype: str
        """
        return self._seller_id

    @seller_id.setter
    def seller_id(self, seller_id):
        """Sets the seller_id of this InlineResponse2006Items.


        :param seller_id: The seller_id of this InlineResponse2006Items.  # noqa: E501
        :type: str
        """

        self._seller_id = seller_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006Items, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006Items):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineResponse2006Items):
            return True

        return self.to_dict() != other.to_dict()
