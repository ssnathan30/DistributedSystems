# coding: utf-8

"""
    Buyer Account API

    API for creating and managing buyer accounts  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from buyer_client.configuration import Configuration


class Body(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item_id': 'int',
        'quantity': 'int',
        'buyer_id': 'int'
    }

    attribute_map = {
        'item_id': 'item_id',
        'quantity': 'quantity',
        'buyer_id': 'buyer_id'
    }

    def __init__(self, item_id=None, quantity=None, buyer_id=None, _configuration=None):  # noqa: E501
        """Body - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._item_id = None
        self._quantity = None
        self._buyer_id = None
        self.discriminator = None

        self.item_id = item_id
        self.quantity = quantity
        self.buyer_id = buyer_id

    @property
    def item_id(self):
        """Gets the item_id of this Body.  # noqa: E501

        ID of the item to be added to the cart  # noqa: E501

        :return: The item_id of this Body.  # noqa: E501
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this Body.

        ID of the item to be added to the cart  # noqa: E501

        :param item_id: The item_id of this Body.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def quantity(self):
        """Gets the quantity of this Body.  # noqa: E501

        Quantity of the item to be added to the cart  # noqa: E501

        :return: The quantity of this Body.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this Body.

        Quantity of the item to be added to the cart  # noqa: E501

        :param quantity: The quantity of this Body.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def buyer_id(self):
        """Gets the buyer_id of this Body.  # noqa: E501

        ID of the buyer whose cart the item should be added to  # noqa: E501

        :return: The buyer_id of this Body.  # noqa: E501
        :rtype: int
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id):
        """Sets the buyer_id of this Body.

        ID of the buyer whose cart the item should be added to  # noqa: E501

        :param buyer_id: The buyer_id of this Body.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and buyer_id is None:
            raise ValueError("Invalid value for `buyer_id`, must not be `None`")  # noqa: E501

        self._buyer_id = buyer_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Body, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Body):
            return True

        return self.to_dict() != other.to_dict()
