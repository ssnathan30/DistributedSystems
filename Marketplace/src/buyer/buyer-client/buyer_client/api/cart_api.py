# coding: utf-8

"""
    Buyer Account API

    API for creating and managing buyer accounts  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from buyer_client.api_client import ApiClient


class CartApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cart_add_post(self, body, **kwargs):  # noqa: E501
        """Add item to shopping cart  # noqa: E501

        Adds an item to the shopping cart of a buyer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_add_post(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: Item ID and quantity to be added to cart (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_add_post_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_add_post_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def cart_add_post_with_http_info(self, body, **kwargs):  # noqa: E501
        """Add item to shopping cart  # noqa: E501

        Adds an item to the shopping cart of a buyer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_add_post_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param Body body: Item ID and quantity to be added to cart (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_add_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `cart_add_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cart/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def cart_remove_delete(self, item_id, quantity, buyer_id, **kwargs):  # noqa: E501
        """Remove item from shopping cart  # noqa: E501

        Removes an item from the shopping cart of a buyer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_remove_delete(item_id, quantity, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: ID of the item to be removed from the cart (required)
        :param int quantity: Quantity of the item to be removed from the cart (required)
        :param int buyer_id: ID of the buyer whose cart the item should be removed from (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cart_remove_delete_with_http_info(item_id, quantity, buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.cart_remove_delete_with_http_info(item_id, quantity, buyer_id, **kwargs)  # noqa: E501
            return data

    def cart_remove_delete_with_http_info(self, item_id, quantity, buyer_id, **kwargs):  # noqa: E501
        """Remove item from shopping cart  # noqa: E501

        Removes an item from the shopping cart of a buyer  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cart_remove_delete_with_http_info(item_id, quantity, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_id: ID of the item to be removed from the cart (required)
        :param int quantity: Quantity of the item to be removed from the cart (required)
        :param int buyer_id: ID of the buyer whose cart the item should be removed from (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_id', 'quantity', 'buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cart_remove_delete" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in params or
                                                       params['item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_id` when calling `cart_remove_delete`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if self.api_client.client_side_validation and ('quantity' not in params or
                                                       params['quantity'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `quantity` when calling `cart_remove_delete`")  # noqa: E501
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `cart_remove_delete`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_id' in params:
            query_params.append(('item_id', params['item_id']))  # noqa: E501
        if 'quantity' in params:
            query_params.append(('quantity', params['quantity']))  # noqa: E501
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/cart/remove', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clear_cart_post(self, buyer_id, **kwargs):  # noqa: E501
        """Clear the shopping cart for a given buyer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_cart_post(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: ID of the buyer whose shopping cart should be cleared (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_cart_post_with_http_info(buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_cart_post_with_http_info(buyer_id, **kwargs)  # noqa: E501
            return data

    def clear_cart_post_with_http_info(self, buyer_id, **kwargs):  # noqa: E501
        """Clear the shopping cart for a given buyer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_cart_post_with_http_info(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: ID of the buyer whose shopping cart should be cleared (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_cart_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `clear_cart_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/clear-cart', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def display_cart_get(self, buyer_id, **kwargs):  # noqa: E501
        """Get the contents of the shopping cart for a given buyer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.display_cart_get(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: ID of the buyer whose shopping cart should be displayed (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.display_cart_get_with_http_info(buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.display_cart_get_with_http_info(buyer_id, **kwargs)  # noqa: E501
            return data

    def display_cart_get_with_http_info(self, buyer_id, **kwargs):  # noqa: E501
        """Get the contents of the shopping cart for a given buyer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.display_cart_get_with_http_info(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: ID of the buyer whose shopping cart should be displayed (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method display_cart_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `display_cart_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/display-cart', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
