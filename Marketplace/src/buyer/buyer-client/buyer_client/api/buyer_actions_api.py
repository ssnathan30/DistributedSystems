# coding: utf-8

"""
    Buyer Account API

    API for creating and managing buyer accounts  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from buyer_client.api_client import ApiClient


class BuyerActionsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def purchase_history_get(self, buyer_id, **kwargs):  # noqa: E501
        """Get purchase history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_history_get(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_history_get_with_http_info(buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_history_get_with_http_info(buyer_id, **kwargs)  # noqa: E501
            return data

    def purchase_history_get_with_http_info(self, buyer_id, **kwargs):  # noqa: E501
        """Get purchase history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_history_get_with_http_info(buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_history_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `purchase_history_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/purchase_history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def purchase_post(self, buyer_id, card_details, **kwargs):  # noqa: E501
        """Purchase items added in the cart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_post(buyer_id, card_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: (required)
        :param CardDetails card_details: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.purchase_post_with_http_info(buyer_id, card_details, **kwargs)  # noqa: E501
        else:
            (data) = self.purchase_post_with_http_info(buyer_id, card_details, **kwargs)  # noqa: E501
            return data

    def purchase_post_with_http_info(self, buyer_id, card_details, **kwargs):  # noqa: E501
        """Purchase items added in the cart  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.purchase_post_with_http_info(buyer_id, card_details, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int buyer_id: (required)
        :param CardDetails card_details: (required)
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['buyer_id', 'card_details']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method purchase_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `purchase_post`")  # noqa: E501
        # verify the required parameter 'card_details' is set
        if self.api_client.client_side_validation and ('card_details' not in params or
                                                       params['card_details'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `card_details` when calling `purchase_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'card_details' in params:
            body_params = params['card_details']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/purchase', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_items_get(self, item_category, keywords, buyer_id, **kwargs):  # noqa: E501
        """Search for items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_items_get(item_category, keywords, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_category: (required)
        :param str keywords: (required)
        :param int buyer_id: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_items_get_with_http_info(item_category, keywords, buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.search_items_get_with_http_info(item_category, keywords, buyer_id, **kwargs)  # noqa: E501
            return data

    def search_items_get_with_http_info(self, item_category, keywords, buyer_id, **kwargs):  # noqa: E501
        """Search for items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_items_get_with_http_info(item_category, keywords, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int item_category: (required)
        :param str keywords: (required)
        :param int buyer_id: (required)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['item_category', 'keywords', 'buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_items_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'item_category' is set
        if self.api_client.client_side_validation and ('item_category' not in params or
                                                       params['item_category'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_category` when calling `search_items_get`")  # noqa: E501
        # verify the required parameter 'keywords' is set
        if self.api_client.client_side_validation and ('keywords' not in params or
                                                       params['keywords'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `keywords` when calling `search_items_get`")  # noqa: E501
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `search_items_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'item_category' in params:
            query_params.append(('item_category', params['item_category']))  # noqa: E501
        if 'keywords' in params:
            query_params.append(('keywords', params['keywords']))  # noqa: E501
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/search-items', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seller_feedback_post(self, seller_id, buyer_id, transaction_id, item_id, feedback_rating, **kwargs):  # noqa: E501
        """Provide seller Feedback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seller_feedback_post(seller_id, buyer_id, transaction_id, item_id, feedback_rating, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int seller_id: (required)
        :param int buyer_id: (required)
        :param str transaction_id: (required)
        :param int item_id: (required)
        :param int feedback_rating: -1 for thumbs down and 1 for thumbs up (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seller_feedback_post_with_http_info(seller_id, buyer_id, transaction_id, item_id, feedback_rating, **kwargs)  # noqa: E501
        else:
            (data) = self.seller_feedback_post_with_http_info(seller_id, buyer_id, transaction_id, item_id, feedback_rating, **kwargs)  # noqa: E501
            return data

    def seller_feedback_post_with_http_info(self, seller_id, buyer_id, transaction_id, item_id, feedback_rating, **kwargs):  # noqa: E501
        """Provide seller Feedback  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seller_feedback_post_with_http_info(seller_id, buyer_id, transaction_id, item_id, feedback_rating, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int seller_id: (required)
        :param int buyer_id: (required)
        :param str transaction_id: (required)
        :param int item_id: (required)
        :param int feedback_rating: -1 for thumbs down and 1 for thumbs up (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seller_id', 'buyer_id', 'transaction_id', 'item_id', 'feedback_rating']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seller_feedback_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seller_id' is set
        if self.api_client.client_side_validation and ('seller_id' not in params or
                                                       params['seller_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `seller_id` when calling `seller_feedback_post`")  # noqa: E501
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `seller_feedback_post`")  # noqa: E501
        # verify the required parameter 'transaction_id' is set
        if self.api_client.client_side_validation and ('transaction_id' not in params or
                                                       params['transaction_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `transaction_id` when calling `seller_feedback_post`")  # noqa: E501
        # verify the required parameter 'item_id' is set
        if self.api_client.client_side_validation and ('item_id' not in params or
                                                       params['item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `item_id` when calling `seller_feedback_post`")  # noqa: E501
        # verify the required parameter 'feedback_rating' is set
        if self.api_client.client_side_validation and ('feedback_rating' not in params or
                                                       params['feedback_rating'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `feedback_rating` when calling `seller_feedback_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'seller_id' in params:
            query_params.append(('seller_id', params['seller_id']))  # noqa: E501
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transaction_id', params['transaction_id']))  # noqa: E501
        if 'item_id' in params:
            query_params.append(('item_id', params['item_id']))  # noqa: E501
        if 'feedback_rating' in params:
            query_params.append(('feedback_rating', params['feedback_rating']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/seller_feedback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def seller_rating_get(self, seller_id, buyer_id, **kwargs):  # noqa: E501
        """Get seller rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seller_rating_get(seller_id, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int seller_id: (required)
        :param int buyer_id: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.seller_rating_get_with_http_info(seller_id, buyer_id, **kwargs)  # noqa: E501
        else:
            (data) = self.seller_rating_get_with_http_info(seller_id, buyer_id, **kwargs)  # noqa: E501
            return data

    def seller_rating_get_with_http_info(self, seller_id, buyer_id, **kwargs):  # noqa: E501
        """Get seller rating  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.seller_rating_get_with_http_info(seller_id, buyer_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int seller_id: (required)
        :param int buyer_id: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['seller_id', 'buyer_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method seller_rating_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'seller_id' is set
        if self.api_client.client_side_validation and ('seller_id' not in params or
                                                       params['seller_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `seller_id` when calling `seller_rating_get`")  # noqa: E501
        # verify the required parameter 'buyer_id' is set
        if self.api_client.client_side_validation and ('buyer_id' not in params or
                                                       params['buyer_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `buyer_id` when calling `seller_rating_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'seller_id' in params:
            query_params.append(('seller_id', params['seller_id']))  # noqa: E501
        if 'buyer_id' in params:
            query_params.append(('buyer_id', params['buyer_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/seller_rating', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
