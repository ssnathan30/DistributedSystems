# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, item_id: int=None, quantity: int=None, buyer_id: int=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param item_id: The item_id of this Body.  # noqa: E501
        :type item_id: int
        :param quantity: The quantity of this Body.  # noqa: E501
        :type quantity: int
        :param buyer_id: The buyer_id of this Body.  # noqa: E501
        :type buyer_id: int
        """
        self.swagger_types = {
            'item_id': int,
            'quantity': int,
            'buyer_id': int
        }

        self.attribute_map = {
            'item_id': 'item_id',
            'quantity': 'quantity',
            'buyer_id': 'buyer_id'
        }

        self._item_id = item_id
        self._quantity = quantity
        self._buyer_id = buyer_id

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_id(self) -> int:
        """Gets the item_id of this Body.

        ID of the item to be added to the cart  # noqa: E501

        :return: The item_id of this Body.
        :rtype: int
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: int):
        """Sets the item_id of this Body.

        ID of the item to be added to the cart  # noqa: E501

        :param item_id: The item_id of this Body.
        :type item_id: int
        """
        if item_id is None:
            raise ValueError("Invalid value for `item_id`, must not be `None`")  # noqa: E501

        self._item_id = item_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this Body.

        Quantity of the item to be added to the cart  # noqa: E501

        :return: The quantity of this Body.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this Body.

        Quantity of the item to be added to the cart  # noqa: E501

        :param quantity: The quantity of this Body.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def buyer_id(self) -> int:
        """Gets the buyer_id of this Body.

        ID of the buyer whose cart the item should be added to  # noqa: E501

        :return: The buyer_id of this Body.
        :rtype: int
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id: int):
        """Sets the buyer_id of this Body.

        ID of the buyer whose cart the item should be added to  # noqa: E501

        :param buyer_id: The buyer_id of this Body.
        :type buyer_id: int
        """
        if buyer_id is None:
            raise ValueError("Invalid value for `buyer_id`, must not be `None`")  # noqa: E501

        self._buyer_id = buyer_id
