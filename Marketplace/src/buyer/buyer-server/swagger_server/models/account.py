# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Account(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, username: str=None, password: str=None, buyer_id: int=None, name: str=None):  # noqa: E501
        """Account - a model defined in Swagger

        :param username: The username of this Account.  # noqa: E501
        :type username: str
        :param password: The password of this Account.  # noqa: E501
        :type password: str
        :param buyer_id: The buyer_id of this Account.  # noqa: E501
        :type buyer_id: int
        :param name: The name of this Account.  # noqa: E501
        :type name: str
        """
        self.swagger_types = {
            'username': str,
            'password': str,
            'buyer_id': int,
            'name': str
        }

        self.attribute_map = {
            'username': 'username',
            'password': 'password',
            'buyer_id': 'buyer_id',
            'name': 'name'
        }

        self._username = username
        self._password = password
        self._buyer_id = buyer_id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this Account.


        :return: The username of this Account.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Account.


        :param username: The username of this Account.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self) -> str:
        """Gets the password of this Account.


        :return: The password of this Account.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Account.


        :param password: The password of this Account.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def buyer_id(self) -> int:
        """Gets the buyer_id of this Account.


        :return: The buyer_id of this Account.
        :rtype: int
        """
        return self._buyer_id

    @buyer_id.setter
    def buyer_id(self, buyer_id: int):
        """Sets the buyer_id of this Account.


        :param buyer_id: The buyer_id of this Account.
        :type buyer_id: int
        """
        if buyer_id is None:
            raise ValueError("Invalid value for `buyer_id`, must not be `None`")  # noqa: E501

        self._buyer_id = buyer_id

    @property
    def name(self) -> str:
        """Gets the name of this Account.


        :return: The name of this Account.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Account.


        :param name: The name of this Account.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
